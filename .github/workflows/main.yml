name: Create Release

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checking out branch
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      # This will decode the keystore from base 64 text representation that we have stored in secrets
      # and generates and keystore file and gets stored in /android-app path
      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

        run: |
          echo $ENCODED_STRING > keystore-b64.txt
          base64 -d keystore-b64.txt > keystore.jks

      - name: Build Project
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        #run: ./gradlew assembleRelease --stacktrace
        run: ./gradlew assemble --stacktrace
      
      - name: Create Distributable
        run: ./gradlew composeApp:packageDeb --stacktrace
        
      - name: Find Distributable4
       #/home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb/com.minidashboard.app_1.0.0-1_amd64.deb
        id: releaseDistributable
        run: echo "distributable=$(find /home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb/*.deb)" >> $GITHUB_OUTPUT

      # Create a release based on the tag
       - name: Create Release
         id: create_release
         uses: actions/create-release@v1
         with:
           #tag_name: ${{ github.ref_name }}
           tag_name: 'v1.0.0'  # Manually specify the tag name
           release_name: Release ${{ github.ref_name }}
           draft: false
           prerelease: false
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Pass the GITHUB_TOKEN here as well

          # List files in a specific folder (e.g., src/)
      - name: List files in the 'deb' directory 1
        run: ls -la /home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb

        
      #- name: Zip Files
      #  uses: papeloto/action-zip@v1
      #  with:
      #    files: ${{ steps.releaseDistributable.outputs.distributable }}
      #    dest: ${{ steps.releaseDistributable.outputs.distributable }}.zip

      # Step 2: Create a ZIP file from the 'build/' directory
      - name: Zip the build directory
        run: zip -r release.zip /home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb

      # List files in a specific folder (e.g., src/)
      - name: List files in the 'deb' directory 2
        run: ls -la /home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb

      # Upload the ZIP as a release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/minidashboard/minidashboard/composeApp/build/compose/binaries/main/deb/releases.zip
          asset_name: releases.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Pass the GITHUB_TOKEN here as well

      #- name: Build Release bundle
      #  env:
      #    RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
      #    RELEASE_KEYSTORE_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
      #    RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
      #  run: ./gradlew bundleRelease --stacktrace

      #- name: Get release file aab path
      #  id: releaseAab
      #  run: echo "aabfile=$(find app/build/outputs/bundle/release/*.aab)" >> $GITHUB_OUTPUT

      #- name: Get release file apk path
      #  id: releaseApk
      #  run: echo "apkfile=$(find app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

      #- name: Zip Files
      #  uses: papeloto/action-zip@v1
      #  with:
      #    files: ${{ steps.releaseAab.outputs.aabfile }} ${{ steps.releaseApk.outputs.apkfile }}
      #    dest: ${{ steps.releaseApk.outputs.apkfile }}.zip

#      - name: Sending release build to Slack
#        uses: MeilCli/slack-upload-file@v3
#        with:
#          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
#          file_path: ${{ steps.releaseApk.outputs.apkfile }}.zip
#          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
#          initial_comment: "Release build is now available."
#
#      - name: upload apk to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID_RELEASE}}
#          serviceCredentialsFileContent: ${{ secrets.SERVICE_CREDENTIALS_FILE_RELEASE }}
#          groups: ${{ github.event.inputs.testers }}
#          file: ${{ steps.releaseApk.outputs.apkfile }}

      #- name: Upload Release Build to Artifacts
      #  uses: actions/upload-artifact@v3
      #  with:
      #     name: release-artifacts
      #     path: ${{ steps.releaseApk.outputs.apkfile }}
